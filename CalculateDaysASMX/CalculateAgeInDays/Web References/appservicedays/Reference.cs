//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace AgeToDays.appservicedays {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="DaysOperationsSoap", Namespace="http://tempuri.org/")]
    public partial class DaysOperations : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ConvertToDaysOperationCompleted;
        
        private System.Threading.SendOrPostCallback DaysBetweenDatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddDaysOperationCompleted;
        
        private System.Threading.SendOrPostCallback SubtractDaysOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public DaysOperations() {
            this.Url = global::CalculateDays.Properties.Settings.Default.CalculateDays_appservicedays_DaysOperations;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ConvertToDaysCompletedEventHandler ConvertToDaysCompleted;
        
        /// <remarks/>
        public event DaysBetweenDatesCompletedEventHandler DaysBetweenDatesCompleted;
        
        /// <remarks/>
        public event AddDaysCompletedEventHandler AddDaysCompleted;
        
        /// <remarks/>
        public event SubtractDaysCompletedEventHandler SubtractDaysCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ConvertToDays", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ConvertToDays(int day, int month, int year) {
            object[] results = this.Invoke("ConvertToDays", new object[] {
                        day,
                        month,
                        year});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ConvertToDaysAsync(int day, int month, int year) {
            this.ConvertToDaysAsync(day, month, year, null);
        }
        
        /// <remarks/>
        public void ConvertToDaysAsync(int day, int month, int year, object userState) {
            if ((this.ConvertToDaysOperationCompleted == null)) {
                this.ConvertToDaysOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConvertToDaysOperationCompleted);
            }
            this.InvokeAsync("ConvertToDays", new object[] {
                        day,
                        month,
                        year}, this.ConvertToDaysOperationCompleted, userState);
        }
        
        private void OnConvertToDaysOperationCompleted(object arg) {
            if ((this.ConvertToDaysCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConvertToDaysCompleted(this, new ConvertToDaysCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DaysBetweenDates", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DaysBetweenDates(int day1, int month1, int year1, int day2, int month2, int year2) {
            object[] results = this.Invoke("DaysBetweenDates", new object[] {
                        day1,
                        month1,
                        year1,
                        day2,
                        month2,
                        year2});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DaysBetweenDatesAsync(int day1, int month1, int year1, int day2, int month2, int year2) {
            this.DaysBetweenDatesAsync(day1, month1, year1, day2, month2, year2, null);
        }
        
        /// <remarks/>
        public void DaysBetweenDatesAsync(int day1, int month1, int year1, int day2, int month2, int year2, object userState) {
            if ((this.DaysBetweenDatesOperationCompleted == null)) {
                this.DaysBetweenDatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDaysBetweenDatesOperationCompleted);
            }
            this.InvokeAsync("DaysBetweenDates", new object[] {
                        day1,
                        month1,
                        year1,
                        day2,
                        month2,
                        year2}, this.DaysBetweenDatesOperationCompleted, userState);
        }
        
        private void OnDaysBetweenDatesOperationCompleted(object arg) {
            if ((this.DaysBetweenDatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DaysBetweenDatesCompleted(this, new DaysBetweenDatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddDays", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddDays(int day, int month, int year, int days) {
            object[] results = this.Invoke("AddDays", new object[] {
                        day,
                        month,
                        year,
                        days});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddDaysAsync(int day, int month, int year, int days) {
            this.AddDaysAsync(day, month, year, days, null);
        }
        
        /// <remarks/>
        public void AddDaysAsync(int day, int month, int year, int days, object userState) {
            if ((this.AddDaysOperationCompleted == null)) {
                this.AddDaysOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddDaysOperationCompleted);
            }
            this.InvokeAsync("AddDays", new object[] {
                        day,
                        month,
                        year,
                        days}, this.AddDaysOperationCompleted, userState);
        }
        
        private void OnAddDaysOperationCompleted(object arg) {
            if ((this.AddDaysCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddDaysCompleted(this, new AddDaysCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SubtractDays", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SubtractDays(int day, int month, int year, int days) {
            object[] results = this.Invoke("SubtractDays", new object[] {
                        day,
                        month,
                        year,
                        days});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SubtractDaysAsync(int day, int month, int year, int days) {
            this.SubtractDaysAsync(day, month, year, days, null);
        }
        
        /// <remarks/>
        public void SubtractDaysAsync(int day, int month, int year, int days, object userState) {
            if ((this.SubtractDaysOperationCompleted == null)) {
                this.SubtractDaysOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubtractDaysOperationCompleted);
            }
            this.InvokeAsync("SubtractDays", new object[] {
                        day,
                        month,
                        year,
                        days}, this.SubtractDaysOperationCompleted, userState);
        }
        
        private void OnSubtractDaysOperationCompleted(object arg) {
            if ((this.SubtractDaysCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubtractDaysCompleted(this, new SubtractDaysCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void ConvertToDaysCompletedEventHandler(object sender, ConvertToDaysCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConvertToDaysCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConvertToDaysCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void DaysBetweenDatesCompletedEventHandler(object sender, DaysBetweenDatesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DaysBetweenDatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DaysBetweenDatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void AddDaysCompletedEventHandler(object sender, AddDaysCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddDaysCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddDaysCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void SubtractDaysCompletedEventHandler(object sender, SubtractDaysCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubtractDaysCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SubtractDaysCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591